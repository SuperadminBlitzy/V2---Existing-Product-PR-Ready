# =============================================================================
# Node.js Tutorial HTTP Server - Nginx Reverse Proxy Configuration
# =============================================================================
#
# Educational Nginx reverse proxy configuration for the Node.js tutorial HTTP 
# server application demonstrating production-ready web server deployment patterns.
# This configuration provides reverse proxy functionality, load balancing, security 
# headers, logging, and compression for the educational '/hello' endpoint while 
# maintaining tutorial simplicity and showcasing modern web application 
# infrastructure architecture.
#
# Educational Features:
# - Complete reverse proxy setup showing frontend-backend separation
# - Upstream server configuration with Docker service integration  
# - Security headers implementation demonstrating web application protection
# - Comprehensive logging with educational context and performance metrics
# - Error handling and custom error pages with tutorial guidance
# - Production-ready patterns while maintaining educational accessibility
#
# Usage Instructions:
# Docker Compose Integration: Configured as nginx service with backend coordination
# Volume Mount: Mount this file to /etc/nginx/conf.d/default.conf in container
# Network: Communicates with backend service via Docker Compose service discovery
# Access: External access via http://localhost (mapped through Docker port binding)
#
# Educational Objectives:
# - Demonstrate reverse proxy concepts and frontend-backend separation
# - Show production web server configuration patterns and best practices
# - Illustrate container networking and service discovery in action
# - Teach security headers, performance optimization, and monitoring integration
# - Provide practical experience with Nginx configuration for Node.js applications
#
# =============================================================================

# -----------------------------------------------------------------------------
# MAIN CONTEXT CONFIGURATION
# -----------------------------------------------------------------------------
# Global Nginx configuration directives that apply to the entire server
# Educational Note: These directives control the main Nginx process behavior

# Run Nginx as the nginx user for security (non-root execution)
# Educational Purpose: Demonstrates security best practice of non-root service execution
user nginx;

# Automatically determine worker processes based on CPU cores
# Educational Purpose: Shows automatic resource optimization for different environments
worker_processes auto;

# Configure worker connections to handle concurrent requests efficiently
# Educational Purpose: Demonstrates connection management for tutorial load requirements
events {
    # Maximum connections per worker process (1024 is suitable for tutorial environments)
    worker_connections 1024;
    
    # Use efficient connection processing method on Linux
    # Educational Purpose: Shows platform-specific optimization
    use epoll;
    
    # Accept multiple connections at once for better performance
    # Educational Purpose: Demonstrates connection processing optimization
    multi_accept on;
}

# -----------------------------------------------------------------------------
# HTTP CONTEXT CONFIGURATION
# -----------------------------------------------------------------------------
# Main HTTP configuration block containing server and location directives
# Educational Note: This context contains all HTTP-related configuration

http {
    # Include standard MIME types for proper content type handling
    # Educational Purpose: Shows proper content type configuration
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Enable sendfile for efficient file transfer (system call optimization)
    # Educational Purpose: Demonstrates performance optimization techniques
    sendfile on;
    
    # Enable TCP optimizations for better network performance
    # Educational Purpose: Shows network-level performance tuning
    tcp_nopush on;
    tcp_nodelay on;
    
    # Configure keepalive timeout for connection reuse
    # Educational Purpose: Demonstrates HTTP connection management
    keepalive_timeout 65;
    
    # Configure types hash for better MIME type processing
    # Educational Purpose: Shows optimization for content type handling
    types_hash_max_size 2048;
    
    # Hide Nginx version information in headers for security
    # Educational Purpose: Demonstrates information disclosure prevention
    server_tokens off;
    
    # Configure gzip compression for better performance
    # Educational Purpose: Shows bandwidth optimization through compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # -----------------------------------------------------------------------------
    # CUSTOM LOG FORMAT FOR EDUCATIONAL MONITORING
    # -----------------------------------------------------------------------------
    # Enhanced log format with upstream performance metrics for educational analysis
    # Educational Purpose: Comprehensive logging for tutorial debugging and learning
    
    log_format tutorial_combined '$remote_addr - $remote_user [$time_local] '
                                '"$request" $status $body_bytes_sent '
                                '"$http_referer" "$http_user_agent" '
                                '"$http_x_forwarded_for" '
                                'upstream_response_time=$upstream_response_time '
                                'request_time=$request_time '
                                'upstream_status=$upstream_status '
                                'tutorial_session="$request_id" '
                                'educational_context="nodejs-tutorial"';
    
    # Configure access logging with educational format
    # Educational Purpose: Detailed request logging for educational monitoring and debugging
    access_log /var/log/nginx/access.log tutorial_combined;
    
    # Configure error logging with appropriate level for educational environments
    # Educational Purpose: Error tracking and troubleshooting assistance for learners
    error_log /var/log/nginx/error.log info;
    
    # -----------------------------------------------------------------------------
    # UPSTREAM CONFIGURATION FOR LOAD BALANCING
    # -----------------------------------------------------------------------------
    # Define upstream servers for the Node.js tutorial backend service
    # Educational Purpose: Demonstrates upstream configuration and load balancing concepts
    
    upstream nodejs_tutorial_backend {
        # Backend server configuration using Docker Compose service discovery
        # Educational Note: 'backend' refers to the Docker Compose service name
        # This demonstrates container-to-container communication in Docker networks
        server backend:3000 weight=1 max_fails=3 fail_timeout=30s;
        
        # Additional backend servers can be added for load balancing demonstration
        # Educational Note: Uncomment additional servers for scaling tutorials
        # server backend:3001 weight=1 max_fails=3 fail_timeout=30s;
        # server backend:3002 weight=1 max_fails=3 fail_timeout=30s;
        
        # Load balancing method (round_robin is default)
        # Educational Purpose: Shows load balancing algorithm selection
        # Alternative methods: least_conn, ip_hash, hash
        
        # Configure keepalive connections to backend for better performance
        # Educational Purpose: Demonstrates backend connection optimization
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # -----------------------------------------------------------------------------
    # RATE LIMITING CONFIGURATION
    # -----------------------------------------------------------------------------
    # Configure rate limiting for educational security demonstration
    # Educational Purpose: Shows basic DDoS protection and request throttling
    
    # Define rate limiting zone for educational environments
    limit_req_zone $binary_remote_addr zone=tutorial_limit:10m rate=10r/s;
    
    # Define connection limiting for educational security
    limit_conn_zone $binary_remote_addr zone=tutorial_conn:10m;
    
    # -----------------------------------------------------------------------------
    # MAIN SERVER CONFIGURATION BLOCK
    # -----------------------------------------------------------------------------
    # Primary server block handling all HTTP requests for the tutorial application
    # Educational Purpose: Complete virtual server configuration demonstration
    
    server {
        # Listen on port 80 (standard HTTP port) as default server
        # Educational Purpose: Shows standard web server port configuration
        listen 80 default_server;
        listen [::]:80 default_server;
        
        # Server name configuration for request routing
        # Educational Purpose: Demonstrates virtual host configuration
        server_name localhost 127.0.0.1 _;
        
        # Configure client request limits for security and stability
        # Educational Purpose: Shows request size management and security boundaries
        client_max_body_size 1m;
        client_body_timeout 60s;
        client_header_timeout 60s;
        
        # Apply rate limiting with educational-appropriate limits
        # Educational Purpose: Demonstrates rate limiting implementation
        limit_req zone=tutorial_limit burst=20 nodelay;
        limit_conn tutorial_conn 10;
        
        # Add custom educational headers to all responses
        # Educational Purpose: Shows custom header implementation for tutorial identification
        add_header X-Tutorial-Info "Node.js Educational HTTP Server" always;
        add_header X-Proxy-Server "Nginx Educational Reverse Proxy" always;
        add_header X-Tutorial-Version "1.0.0" always;
        add_header X-Educational-Context "Web Server Architecture Demo" always;
        
        # Security headers for educational web application protection
        # Educational Purpose: Comprehensive security headers demonstration
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'" always;
        add_header X-Download-Options "noopen" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        
        # Disable caching for educational purposes (ensures fresh responses)
        # Educational Purpose: Prevents caching confusion during tutorial learning
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        
        # -----------------------------------------------------------------------------
        # HELLO ENDPOINT REVERSE PROXY CONFIGURATION
        # -----------------------------------------------------------------------------
        # Primary tutorial endpoint demonstrating reverse proxy functionality
        # Educational Purpose: Complete reverse proxy setup for Node.js backend communication
        
        location /hello {
            # Reverse proxy configuration to Node.js backend service
            # Educational Purpose: Shows proper reverse proxy setup and header forwarding
            proxy_pass http://nodejs_tutorial_backend;
            
            # Use HTTP/1.1 for better connection handling with keepalive
            # Educational Purpose: Demonstrates modern HTTP protocol usage
            proxy_http_version 1.1;
            
            # Configure connection upgrade handling for WebSocket compatibility (future use)
            # Educational Purpose: Shows WebSocket-ready configuration patterns
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            
            # Forward original host information to backend
            # Educational Purpose: Demonstrates proper host header handling
            proxy_set_header Host $host;
            
            # Forward client IP address information for logging and security
            # Educational Purpose: Shows client IP preservation through proxy
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Add educational context headers for backend processing
            # Educational Purpose: Shows custom header passing for application context
            proxy_set_header X-Tutorial-Request "Nginx-Proxied-Request";
            proxy_set_header X-Educational-Flow "Frontend-Proxy-to-Backend";
            
            # Configure proxy timeouts for educational environment stability
            # Educational Purpose: Demonstrates timeout management for reliable service
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_next_upstream_timeout 30s;
            
            # Configure upstream retry behavior for resilience
            # Educational Purpose: Shows error handling and retry mechanisms
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            
            # Configure response buffering for better performance
            # Educational Purpose: Demonstrates response optimization techniques
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Add location-specific educational logging
            # Educational Purpose: Request-specific logging for endpoint analysis
            access_log /var/log/nginx/hello_access.log tutorial_combined;
            error_log /var/log/nginx/hello_error.log info;
        }
        
        # -----------------------------------------------------------------------------
        # HEALTH CHECK ENDPOINT CONFIGURATION
        # -----------------------------------------------------------------------------
        # Health monitoring endpoint for load balancer and orchestration integration
        # Educational Purpose: Demonstrates health check patterns and monitoring integration
        
        location /health {
            # Proxy health checks to backend hello endpoint (backend has no dedicated health endpoint)
            # Educational Purpose: Shows health check implementation using existing endpoints
            proxy_pass http://nodejs_tutorial_backend/hello;
            
            # Basic proxy configuration for health checks
            # Educational Purpose: Minimal proxy setup for health monitoring
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            
            # Fast timeouts for health check responsiveness
            # Educational Purpose: Shows optimized timeouts for monitoring
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Disable access logging for health check noise reduction
            # Educational Purpose: Shows selective logging for operational clarity
            access_log off;
            
            # Add health check identification header
            # Educational Purpose: Shows request identification for backend processing
            proxy_set_header X-Health-Check "Nginx-Health-Monitor";
        }
        
        # -----------------------------------------------------------------------------
        # API VERSIONING DEMONSTRATION (FUTURE EXTENSION)
        # -----------------------------------------------------------------------------
        # Example API versioning configuration for educational API design patterns
        # Educational Purpose: Shows URL-based API versioning implementation
        
        location ~ ^/v([0-9]+)/hello$ {
            # Extract version number from URL for educational API versioning
            # Educational Purpose: Demonstrates URL pattern matching and variable extraction
            set $api_version $1;
            
            # Route to backend with version information
            # Educational Purpose: Shows version-aware request routing
            proxy_pass http://nodejs_tutorial_backend/hello;
            proxy_set_header X-API-Version $api_version;
            proxy_set_header X-Tutorial-Versioning "URL-Based-API-Versioning";
            
            # Standard proxy configuration
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # -----------------------------------------------------------------------------
        # STATIC ASSETS AND FAVICON HANDLING
        # -----------------------------------------------------------------------------
        # Handle common web assets and prevent 404 errors in logs
        # Educational Purpose: Shows static asset handling and log noise reduction
        
        location = /favicon.ico {
            # Return empty response for favicon requests (no favicon in tutorial)
            # Educational Purpose: Demonstrates empty response handling
            return 204;
            access_log off;
            log_not_found off;
        }
        
        location = /robots.txt {
            # Simple robots.txt for educational context
            # Educational Purpose: Shows inline content serving
            return 200 "# Node.js Tutorial Application - Educational Use Only\nUser-agent: *\nDisallow: /\n";
            add_header Content-Type text/plain;
            access_log off;
        }
        
        # -----------------------------------------------------------------------------
        # ROOT LOCATION AND CATCH-ALL CONFIGURATION
        # -----------------------------------------------------------------------------
        # Handle root requests and provide educational guidance
        # Educational Purpose: Shows default location handling and user guidance
        
        location = / {
            # Redirect root requests to tutorial endpoint
            # Educational Purpose: Demonstrates request redirection for user guidance
            return 301 /hello;
        }
        
        # Catch-all location for undefined routes
        # Educational Purpose: Shows comprehensive request handling and educational error responses
        location / {
            # Return educational 404 response with guidance
            # Educational Purpose: Educational error handling with helpful information
            return 404 '<!DOCTYPE html>
<html>
<head>
    <title>Node.js Tutorial - Endpoint Not Found</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .title { color: #2c5aa0; margin-bottom: 20px; }
        .endpoint { background: #e8f4f8; padding: 15px; border-radius: 4px; margin: 10px 0; }
        .code { font-family: monospace; background: #f0f0f0; padding: 2px 6px; border-radius: 3px; }
        .footer { margin-top: 30px; font-size: 14px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="title">🎓 Node.js Tutorial HTTP Server</h1>
        <h2>Educational Endpoint Guide</h2>
        <p>Welcome to the Node.js tutorial application! This educational server demonstrates basic HTTP server concepts.</p>
        
        <div class="endpoint">
            <h3>Available Endpoint:</h3>
            <p><strong>Primary Tutorial Endpoint:</strong> <code class="code">GET /hello</code></p>
            <p><strong>Response:</strong> <code class="code">"Hello world"</code></p>
            <p><strong>Purpose:</strong> Demonstrates basic HTTP request-response functionality</p>
        </div>
        
        <div class="endpoint">
            <h3>Quick Start:</h3>
            <p>Try the tutorial endpoint: <a href="/hello">http://localhost/hello</a></p>
            <p>Or use curl: <code class="code">curl http://localhost/hello</code></p>
        </div>
        
        <div class="footer">
            <p>This is an educational demonstration of Node.js HTTP server capabilities with Nginx reverse proxy configuration.</p>
            <p>For learning purposes only - not intended for production use.</p>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
        
        # -----------------------------------------------------------------------------
        # ERROR PAGE CONFIGURATION
        # -----------------------------------------------------------------------------
        # Custom error pages with educational context and troubleshooting guidance
        # Educational Purpose: Shows custom error page implementation with learning assistance
        
        # Custom 404 error page location
        error_page 404 /custom_404.html;
        location = /custom_404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # Custom 50x error page location
        error_page 500 502 503 504 /custom_50x.html;
        location = /custom_50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # -----------------------------------------------------------------------------
        # NGINX STATUS AND MONITORING (EDUCATIONAL)
        # -----------------------------------------------------------------------------
        # Nginx status endpoint for educational monitoring demonstration
        # Educational Purpose: Shows server status monitoring capabilities
        
        location = /nginx_status {
            # Enable Nginx status module for educational monitoring
            # Educational Purpose: Demonstrates server status monitoring
            stub_status on;
            
            # Restrict access to localhost only for security
            # Educational Purpose: Shows access control implementation
            allow 127.0.0.1;
            allow ::1;
            deny all;
            
            # Disable logging for status checks
            access_log off;
            
            # Add educational headers
            add_header X-Tutorial-Feature "Nginx-Status-Monitoring" always;
        }
        
        # -----------------------------------------------------------------------------
        # PROXY STATUS AND UPSTREAM MONITORING
        # -----------------------------------------------------------------------------
        # Educational endpoint for proxy and upstream status monitoring
        # Educational Purpose: Shows upstream server monitoring capabilities
        
        location = /upstream_status {
            # Educational upstream status information
            # Educational Purpose: Demonstrates upstream monitoring concepts
            return 200 '# Node.js Tutorial Backend Status
Upstream: nodejs_tutorial_backend
Backend Servers: backend:3000
Load Balancing: Round Robin
Health Check: Available via /health endpoint
Educational Context: Reverse Proxy Architecture Demonstration
';
            add_header Content-Type text/plain;
            add_header X-Tutorial-Feature "Upstream-Status-Monitoring" always;
            
            # Restrict access for security
            allow 127.0.0.1;
            allow ::1;
            deny all;
            
            access_log off;
        }
    }
    
    # -----------------------------------------------------------------------------
    # EDUCATIONAL CONFIGURATION VALIDATION SERVER
    # -----------------------------------------------------------------------------
    # Additional server block for configuration testing and validation
    # Educational Purpose: Shows multi-server configuration and testing capabilities
    
    server {
        # Test server on different port for configuration validation
        # Educational Purpose: Demonstrates multi-server setup and testing
        listen 8080;
        server_name config-test.localhost;
        
        # Simple configuration test endpoint
        # Educational Purpose: Shows configuration validation endpoints
        location /config-test {
            return 200 '# Nginx Configuration Test
Configuration Status: Active
Tutorial Mode: Enabled
Proxy Configuration: nodejs_tutorial_backend
Security Headers: Enabled
Logging: Enhanced Educational Format
Educational Features: All Active
';
            add_header Content-Type text/plain;
            add_header X-Config-Test "PASSED" always;
        }
        
        # Configuration validation endpoint
        location /validate {
            # Validate proxy connectivity to backend
            # Educational Purpose: Shows configuration testing patterns
            proxy_pass http://nodejs_tutorial_backend/hello;
            proxy_set_header X-Config-Validation "Nginx-Backend-Connectivity-Test";
            add_header X-Validation-Test "Backend-Connectivity" always;
        }
    }
}

# =============================================================================
# EDUCATIONAL USAGE NOTES AND DEPLOYMENT INTEGRATION
# =============================================================================
#
# DOCKER COMPOSE INTEGRATION:
#
# This configuration is designed to work with the Docker Compose setup:
# - Mount this file to /etc/nginx/conf.d/default.conf in nginx container
# - Nginx container should be connected to the tutorial-network
# - Backend service discovery works through Docker Compose service names
#
# VOLUME MOUNTING EXAMPLE:
# services:
#   nginx:
#     image: nginx:alpine
#     volumes:
#       - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
#       - ./logs/nginx:/var/log/nginx
#     ports:
#       - "127.0.0.1:80:80"
#     depends_on:
#       - backend
#     networks:
#       - tutorial-network
#
# EDUCATIONAL TESTING COMMANDS:
#
# Basic endpoint testing:
# curl -v http://localhost/hello
# curl -H "Accept: application/json" http://localhost/hello
# curl -I http://localhost/hello  # Headers only
#
# Security header testing:
# curl -I http://localhost/hello | grep -i "x-"
#
# Performance testing with timing:
# curl -o /dev/null -s -w "Response Time: %{time_total}s\n" http://localhost/hello
#
# Health check validation:
# curl -v http://localhost/health
#
# Status monitoring (from container or localhost access):
# curl http://localhost/nginx_status
# curl http://localhost/upstream_status
#
# Configuration validation:
# curl http://localhost:8080/config-test
# curl http://localhost:8080/validate
#
# EDUCATIONAL LOG MONITORING:
#
# Monitor access logs with educational context:
# docker exec nginx-container tail -f /var/log/nginx/access.log
#
# Monitor error logs:
# docker exec nginx-container tail -f /var/log/nginx/error.log
#
# Monitor hello endpoint specific logs:
# docker exec nginx-container tail -f /var/log/nginx/hello_access.log
#
# TROUBLESHOOTING AND DIAGNOSTICS:
#
# Test Nginx configuration syntax:
# docker exec nginx-container nginx -t
#
# Reload configuration without restart:
# docker exec nginx-container nginx -s reload
#
# Check Nginx status:
# docker exec nginx-container ps aux | grep nginx
#
# Test backend connectivity from nginx container:
# docker exec nginx-container nc -zv backend 3000
# docker exec nginx-container wget -O- http://backend:3000/hello
#
# EDUCATIONAL VALUE:
#
# This configuration demonstrates:
# - Complete reverse proxy setup with production-ready patterns
# - Security headers implementation and best practices
# - Load balancing concepts with upstream configuration
# - Comprehensive logging for monitoring and debugging
# - Error handling with educational context and guidance
# - Container networking and service discovery integration
# - Performance optimization through compression and connection management
# - Health checking and monitoring endpoint implementation
# - Configuration validation and testing capabilities
# - Educational error pages with troubleshooting guidance
#
# SECURITY CONSIDERATIONS:
#
# - Server tokens disabled to hide version information
# - Comprehensive security headers for web application protection
# - Rate limiting to prevent abuse and demonstrate DDoS protection
# - Access control for status and monitoring endpoints
# - Localhost binding for tutorial safety (configured in Docker port mapping)
# - Non-root user execution and proper privilege separation
#
# PERFORMANCE FEATURES:
#
# - Gzip compression for bandwidth optimization
# - Keepalive connections for connection reuse
# - Optimized buffer settings for response handling
# - Efficient upstream connection management
# - TCP optimization for better network performance
#
# =============================================================================