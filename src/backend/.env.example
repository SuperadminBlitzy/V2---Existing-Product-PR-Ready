# ==============================================================================
# Node.js Tutorial Application - Environment Variables Template
# ==============================================================================
# 
# Copy this file to .env and customize values for your development environment
# All variables are optional with sensible defaults for tutorial use
# Uncomment and modify variables as needed for your specific setup
#
# USAGE INSTRUCTIONS:
# 1. Copy this file to .env in the same directory (src/backend/)
# 2. Uncomment variables you want to customize by removing the # prefix
# 3. Modify values according to your development environment needs
# 4. Save the file and restart the server to apply changes
# 
# SECURITY NOTE:
# The actual .env file should be added to .gitignore to prevent committing
# sensitive values to version control systems
# ==============================================================================

# ==============================================================================
# APPLICATION ENVIRONMENT CONFIGURATION
# ==============================================================================
# Controls application behavior, optimization, and logging verbosity for 
# different deployment contexts. This setting affects how the application
# handles errors, optimizations, and debug output.
#
# Available options:
# - development: Verbose logging, detailed error messages, dev optimizations
# - test: Minimal logging, suitable for automated testing environments
# - production: Optimized performance, reduced logging, secure error handling
# - educational: Enhanced tutorial features with detailed explanations
#
# Educational Purpose: Demonstrates environment-based configuration patterns
# and shows how applications adapt to different deployment contexts
#
NODE_ENV=development

# ==============================================================================
# HTTP SERVER CONFIGURATION
# ==============================================================================
# Customize server network binding and connection settings for your local
# development environment. These settings control how the Node.js HTTP server
# binds to network interfaces and manages connections.

# ------------------------------------------------------------------------------
# Server Port Configuration
# ------------------------------------------------------------------------------
# HTTP server port number override for customizing the tutorial server's 
# network binding when default port 3000 is unavailable on your system.
# 
# Valid range: 1-65535 (preferably non-privileged ports >1024)
# Common alternatives: 3001, 8000, 8080, 8888
# 
# Educational Purpose: Shows how to handle port conflicts in development 
# environments and demonstrates flexible server configuration patterns
#
PORT=3000

# ------------------------------------------------------------------------------
# Server Hostname Configuration  
# ------------------------------------------------------------------------------
# HTTP server hostname/IP address binding override for network interface
# configuration. Should remain localhost for tutorial security purposes.
#
# Security options (localhost only):
# - 127.0.0.1: IPv4 localhost loopback address
# - localhost: Hostname resolution to loopback  
# - ::1: IPv6 localhost loopback address
#
# WARNING: Do not use 0.0.0.0 or external IP addresses for tutorial purposes
# as this would expose the server to external network access
#
# Educational Purpose: Demonstrates network security concepts and localhost-only
# binding for safe tutorial environments
#
HOST=127.0.0.1

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================
# Control application log output verbosity and detail level for debugging
# and monitoring purposes. This affects what information is displayed in
# the console during application execution.

# ------------------------------------------------------------------------------
# Log Level Setting
# ------------------------------------------------------------------------------
# Logging verbosity level that controls which log messages are displayed
# during application execution for debugging and monitoring purposes.
#
# Available levels (from most to least verbose):
# - debug: Most verbose, shows detailed HTTP request/response information,
#          internal processing steps, and debugging information
# - info: Normal operation logging, server startup, request summaries
# - warn: Warning messages for potential issues and deprecated features  
# - error: Only critical errors and failures
#
# Recommended settings:
# - Use 'debug' for detailed learning and troubleshooting
# - Use 'info' for normal tutorial operation  
# - Use 'warn' or 'error' for quieter output
#
# Educational Purpose: Teaches logging levels and verbosity control for
# application monitoring and troubleshooting
#
LOG_LEVEL=info

# ==============================================================================
# SERVER TIMEOUT SETTINGS
# ==============================================================================
# Configure connection and request timeout behavior to manage connection 
# lifecycle and prevent hanging requests. All timeout values are specified
# in milliseconds (1000ms = 1 second).

# ------------------------------------------------------------------------------
# General Server Timeout
# ------------------------------------------------------------------------------  
# HTTP server request timeout in milliseconds for managing connection lifecycle
# and preventing hanging requests that could exhaust server resources.
#
# Reasonable range: 5000-120000 (5 seconds to 2 minutes)  
# Default: 30000 (30 seconds)
#
# This timeout applies to the overall request processing time from when the
# server receives the request until the response is complete.
#
# Educational Purpose: Demonstrates server timeout configuration and connection
# management concepts for preventing resource exhaustion
#
SERVER_TIMEOUT=30000

# ------------------------------------------------------------------------------
# Keep-Alive Connection Timeout
# ------------------------------------------------------------------------------
# HTTP keep-alive connection timeout for optimizing connection reuse and 
# server performance in educational environments.
#
# Reasonable range: 1000-60000 (1 second to 1 minute)
# Default: 5000 (5 seconds)
#
# Keep-alive allows the same TCP connection to be reused for multiple HTTP
# requests, improving performance by avoiding connection setup overhead.
#
# Educational Purpose: Shows HTTP connection optimization and performance
# tuning concepts for efficient client-server communication
#
KEEP_ALIVE_TIMEOUT=5000

# ------------------------------------------------------------------------------
# Individual Request Timeout  
# ------------------------------------------------------------------------------
# Individual HTTP request processing timeout in milliseconds to prevent 
# resource exhaustion from slow or hanging individual requests.
#
# Reasonable range: 1000-60000 (1 second to 1 minute)
# Default: 10000 (10 seconds)
#
# This timeout applies to individual request processing and should be shorter
# than the overall server timeout to allow for proper request lifecycle management.
#
# Educational Purpose: Demonstrates individual request timeout management and
# server resource protection strategies
#
REQUEST_TIMEOUT=10000

# ==============================================================================
# EDUCATIONAL NOTES AND BEST PRACTICES
# ==============================================================================
#
# CONFIGURATION MANAGEMENT CONCEPTS:
# • Environment variables separate configuration from application code
# • Different environments (dev/test/prod) can have different configurations
# • Configuration templates like this file document available options
# • The .env file should be excluded from version control for security
#
# TIMEOUT CONFIGURATION GUIDELINES:
# • All timeouts are in milliseconds (1000ms = 1 second)
# • REQUEST_TIMEOUT should be less than SERVER_TIMEOUT
# • KEEP_ALIVE_TIMEOUT should be shorter for development environments
# • Adjust values based on your development machine's performance
#
# SECURITY CONSIDERATIONS:
# • Localhost binding (127.0.0.1) prevents external access for security
# • No sensitive secrets are required for this tutorial application  
# • Always use safe, documented values for educational environments
# • Never expose development servers to external networks
#
# DEVELOPMENT WORKFLOW:
# • Changes take effect after restarting the server (npm start or npm run dev)
# • Use LOG_LEVEL=debug for detailed learning and troubleshooting
# • Default values are optimized for tutorial learning environments
# • Invalid values generate educational error messages with correction guidance
#
# COMMON CUSTOMIZATIONS:
# • Change PORT if 3000 is already in use on your system
# • Set LOG_LEVEL=debug for detailed learning and troubleshooting  
# • Adjust timeout values for slower development machines
# • Set NODE_ENV=educational for enhanced tutorial features
#
# TROUBLESHOOTING:
# • "Port already in use" error: Change PORT to another value (e.g., 3001)
# • Slow responses: Increase timeout values or check system performance
# • Too much log output: Change LOG_LEVEL to 'warn' or 'error'
# • Connection issues: Verify HOST is set to localhost address
#
# ==============================================================================
# END OF CONFIGURATION TEMPLATE
# ==============================================================================