# =============================================================================
# Node.js Dependencies .gitignore - Safety Net Configuration
# =============================================================================
#
# This .gitignore file provides additional protection against accidentally
# tracking dependency-generated files, cache files, and temporary artifacts
# that might be created within Node.js package directories.
#
# Educational Context:
# While the parent .gitignore already excludes the entire node_modules 
# directory, this file demonstrates comprehensive version control practices
# and serves as a safety net in educational environments where directory
# structures might be modified or partially tracked.
#
# This configuration aligns with the Node.js tutorial application's
# educational objectives by illustrating defensive programming approaches
# and thorough project setup practices.
#
# =============================================================================

# Package Cache Files
# =============================================================================
# Exclude package manager cache directories and files that might be created
# within dependency packages. These cache files can be regenerated and should
# never be committed to version control as they contain environment-specific
# data and can cause conflicts between different development environments.

# General package cache directories
.cache/
*.cache

# npm cache directory (can appear in packages that run npm internally)
.npm/

# Yarn cache directory (for packages that use Yarn internally)
.yarn-cache/

# pnpm store directory (for packages that use pnpm internally)
.pnpm-store/

# Temporary and Log Files
# =============================================================================
# Prevent temporary files and logs generated by dependencies from being tracked.
# These files are created during package execution, testing, or development
# and contain runtime-specific information that should not be persisted in
# version control.

# Log files generated by dependencies
*.log

# Temporary files created during package operations
*.tmp
.tmp/
temp/

# Log directories that might be created by dependency packages
logs/

# Build Artifacts
# =============================================================================
# Exclude compiled or built artifacts that might be generated within package
# directories. These files are generated from source code and should be
# excluded to prevent version control bloat and potential merge conflicts.

# Common build output directories
dist/
build/
compiled/

# Compiled files with various extensions
*.compiled.*

# Hidden build directories
.build/

# Runtime Files
# =============================================================================
# Exclude runtime process files and testing artifacts generated by dependencies.
# These files are created during process execution and contain runtime-specific
# information such as process IDs, lock files, and test coverage data.

# Process ID files
*.pid

# Lock files generated during package operations
*.lock

# NYC (Istanbul) test coverage output
.nyc_output/

# Jest and other test coverage directories
coverage/

# OS and Editor Files
# =============================================================================
# Exclude operating system and editor-specific files that might appear within
# packages. These files are environment-specific and can cause unnecessary
# differences between development environments.

# macOS system files
.DS_Store

# Windows system files
Thumbs.db

# Vim swap files
*.swp
*.swo

# Visual Studio Code settings (if created within packages)
.vscode/

# JetBrains IDE settings (if created within packages)
.idea/

# Development Artifacts
# =============================================================================
# Exclude development tool artifacts and cache files generated during package
# development. These files are created by various development tools and should
# not be tracked as they contain environment-specific cache data.

# Git merge conflict resolution files
*.orig
*.rej

# ESLint cache files
.eslintcache

# Stylelint cache files
.stylelintcache

# TypeScript build information files
*.tsbuildinfo

# =============================================================================
# Educational Notes:
# =============================================================================
#
# Defensive Configuration:
# This .gitignore demonstrates a defensive approach to version control
# configuration by providing multiple layers of protection. Even though
# the parent .gitignore excludes node_modules entirely, this file provides
# additional protection in scenarios where:
#
# 1. Educational environments modify directory structures
# 2. Development workflows expose package internals
# 3. Custom package modifications require selective tracking
# 4. Partial node_modules tracking during development
#
# Package Management Integration:
# The patterns in this file protect against accidentally tracking files
# generated by development dependencies including:
# - Jest: Test runner cache and temporary files
# - ESLint: Linting cache files  
# - Nodemon: Restart and monitoring artifacts
# - Babel: Transpilation cache and temporary files
# - SuperTest: Testing artifacts and logs
#
# Best Practices Demonstrated:
# - Comprehensive pattern coverage for Node.js ecosystem
# - Organized by logical categories for maintainability
# - Extensive documentation for educational value
# - Defensive programming approach to project configuration
#
# This configuration supports the tutorial application's goal of teaching
# thorough development practices while maintaining focus on core Node.js
# HTTP server concepts.
#
# =============================================================================