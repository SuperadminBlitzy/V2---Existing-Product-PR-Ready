# =============================================================================
# Node.js Tutorial Backend - Git Ignore Configuration
# =============================================================================
# 
# This .gitignore file is designed for a Node.js educational tutorial application
# that demonstrates HTTP server fundamentals. It excludes development artifacts,
# build outputs, sensitive configuration files, testing reports, and temporary
# files from version control to maintain repository cleanliness and security.
#
# Educational Purpose: This file demonstrates proper version control hygiene
# by categorizing different types of files that should be excluded from Git
# tracking, helping developers understand what belongs in version control
# versus what should be generated or configured locally.
#
# =============================================================================

# -----------------------------------------------------------------------------
# NODE.JS DEPENDENCIES AND PACKAGE MANAGER ARTIFACTS
# -----------------------------------------------------------------------------
# Excludes Node.js package dependencies and package manager artifacts.
# Dependencies are managed through package.json and should be installed locally
# using npm install, yarn install, or pnpm install commands.

node_modules/                   # All installed dependencies via npm/yarn/pnpm
npm-debug.log*                  # NPM debug logs from failed installations
yarn-debug.log*                 # Yarn debug logs and error information
yarn-error.log*                 # Yarn specific error logs
.npm                            # NPM cache directory (global npm cache)
.yarn-integrity                 # Yarn integrity verification file

# -----------------------------------------------------------------------------
# PACKAGE MANAGER LOCK FILES (Educational Flexibility)
# -----------------------------------------------------------------------------
# For tutorial purposes, excluding lock files allows flexibility in package
# manager choice. In production projects, these should typically be committed.

package-lock.json               # NPM lock file - normally committed in production
yarn.lock                       # Yarn lock file - normally committed in production  
pnpm-lock.yaml                  # PNPM lock file - normally committed in production

# -----------------------------------------------------------------------------
# ENVIRONMENT CONFIGURATION AND SENSITIVE DATA
# -----------------------------------------------------------------------------
# Excludes environment variable files containing sensitive configuration.
# Environment files may contain sensitive data like API keys, database
# credentials, and are environment-specific (development, test, production).

.env                            # Base environment variables file
.env.local                      # Local environment overrides
.env.*.local                    # Environment-specific local overrides
.env.development                # Development environment configuration
.env.test                       # Test environment configuration
.env.production                 # Production environment configuration (NEVER commit)

# -----------------------------------------------------------------------------
# SECURITY-SENSITIVE FILES AND CREDENTIALS
# -----------------------------------------------------------------------------
# Prevents sensitive configuration files and credentials from being
# accidentally committed to version control, protecting against security breaches.

secrets.*                       # Any files containing secrets
private-key*                    # Private key files
*.pem                          # Privacy Enhanced Mail certificate files
*.key                          # Private key files
config/production.*             # Production configuration files
auth-config.*                   # Authentication configuration files
jwt-secret*                     # JSON Web Token secret files
oauth-credentials.*             # OAuth credential files
api-keys.*                      # API key configuration files

# SSL/TLS Certificates and related files
*.crt                          # Certificate files
*.cert                         # Certificate files
*.ca-bundle                    # Certificate authority bundles
ssl/                           # SSL certificate directory

# -----------------------------------------------------------------------------
# TESTING ARTIFACTS AND COVERAGE REPORTS
# -----------------------------------------------------------------------------
# Excludes test coverage reports and testing output files.
# Testing artifacts are generated during test execution and can be
# recreated from source code, so they don't belong in version control.

coverage/                       # Test coverage reports directory
*.lcov                         # Coverage data in LCOV format
test-results/                  # Test execution results
junit-report.xml               # JUnit format test reports
test-report.html               # HTML test reports
.nyc_output/                   # NYC (Istanbul) coverage tool output

# -----------------------------------------------------------------------------
# LOGGING OUTPUTS AND RUNTIME LOGS
# -----------------------------------------------------------------------------
# Excludes log files and logging directories.
# Log files are runtime artifacts generated during application execution
# and should not be version controlled as they're environment-specific.

logs/                          # Application logs directory
*.log                          # All log files
log-*.txt                      # Timestamped log files
debug.log                      # Debug-specific log files
error.log                      # Error log files
combined.log                   # Combined application logs

# -----------------------------------------------------------------------------
# BUILD ARTIFACTS AND TEMPORARY FILES
# -----------------------------------------------------------------------------
# Excludes build outputs and temporary files.
# Build artifacts are generated during the build process and should be
# reproducible from source code, making them unnecessary for version control.

dist/                          # Distribution/build output directory
build/                         # Build output directory
out/                           # Output directory for compiled assets
tmp/                           # Temporary files directory
.cache/                        # Cache directories
*.tmp                          # Temporary files
*.temp                         # Temporary files

# -----------------------------------------------------------------------------
# IDE AND EDITOR CONFIGURATION FILES
# -----------------------------------------------------------------------------
# Excludes IDE and editor-specific configuration files.
# IDE configurations are developer-specific preferences and should not be
# shared across team members, as each developer may use different tools.

.vscode/                       # Visual Studio Code settings
.idea/                         # IntelliJ IDEA / WebStorm settings
*.swp                          # Vim swap files
*.swo                          # Vim swap files (backup)
*~                             # Backup files created by editors

# Operating System Files
.DS_Store                      # macOS folder metadata
Thumbs.db                      # Windows image cache
Desktop.ini                    # Windows folder configuration

# -----------------------------------------------------------------------------
# DEVELOPMENT TOOLS CACHE AND RUNTIME FILES
# -----------------------------------------------------------------------------
# Excludes development tool cache and runtime files.
# Development tool artifacts are temporary, environment-specific, and
# can be regenerated when needed.

.eslintcache                   # ESLint cache for faster linting
.stylelintcache               # Stylelint cache for CSS linting
.sass-cache/                   # Sass preprocessing cache
*.pid                          # Process ID files
*.seed                         # Seed files for random generators
*.pid.lock                     # Process ID lock files

# -----------------------------------------------------------------------------
# EDUCATIONAL TUTORIAL PATTERNS
# -----------------------------------------------------------------------------
# Excludes educational artifacts and student work that shouldn't be
# committed to the main tutorial repository.

# Tutorial Backup Files
*.tutorial.bak                 # Tutorial backup files
tutorial-backup-*              # Timestamped tutorial backups
student-work/                  # Individual student work directory
exercises/*/solutions/         # Exercise solution directories

# Learning and Development Artifacts
.repl_history                  # Node.js REPL history
debug-output-*                 # Debug output files
student-notes.md               # Individual learning notes
learning-progress.json         # Student progress tracking

# Development Examples and Experiments
example-*.js.bak              # Example file backups
prototype-*                    # Prototype implementations
experimental/                  # Experimental code directory

# -----------------------------------------------------------------------------
# PERFORMANCE MONITORING AND PROFILING DATA
# -----------------------------------------------------------------------------
# Excludes performance monitoring artifacts that are generated during
# application profiling and performance analysis.

# Memory and CPU Profiling
*.heapsnapshot                 # V8 heap snapshots
*.cpuprofile                   # CPU profiling data
heapdump-*                     # Heap dump files

# Performance Analysis
*.trace                        # Trace files
profile-*                      # Profiling output files
benchmark-results/             # Benchmark test results

# Monitoring Data
metrics/                       # Application metrics data
performance-logs/              # Performance-specific logs

# -----------------------------------------------------------------------------
# RUNTIME AND PROCESS FILES
# -----------------------------------------------------------------------------
# Excludes files created during application runtime that are specific
# to the current execution context.

*.lockfile                     # Generic lock files
.runtime                       # Runtime configuration
.pid                          # Process ID files

# -----------------------------------------------------------------------------
# END OF GITIGNORE CONFIGURATION
# -----------------------------------------------------------------------------
#
# Learning Notes:
# 1. Always test your .gitignore patterns with 'git check-ignore' command
# 2. Use 'git rm --cached <file>' to untrack files already committed
# 3. Remember that .gitignore only affects untracked files
# 4. Consider using global gitignore for system-specific patterns
# 5. Regular pattern: * matches any number of characters except /
# 6. Directory pattern: trailing / specifies directories only
#
# For tutorial purposes: This comprehensive .gitignore demonstrates proper
# version control hygiene while maintaining educational flexibility.
# =============================================================================