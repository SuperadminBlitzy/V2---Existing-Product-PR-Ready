# Node.js Tutorial CI - Comprehensive Continuous Integration Pipeline
# This workflow implements automated code quality assurance, testing, and validation
# processes for the Node.js tutorial HTTP server application with educational features
name: Node.js Tutorial CI

# Workflow triggers for comprehensive development lifecycle coverage
on:
  # Push events for continuous validation on main development branches
  push:
    branches: 
      - main
      - develop
      - 'feature/*'
    paths:
      - 'src/backend/**'
      - '.github/workflows/**'
      - '*.js'
      - '*.json'
      - '*.md'
  
  # Pull request events for code quality assurance before merging
  pull_request:
    branches:
      - main
      - develop
    types:
      - opened
      - synchronize
      - reopened
  
  # Scheduled runs for dependency updates and maintenance checks
  schedule:
    # Weekly scheduled run every Monday at 2 AM UTC for dependency updates check
    - cron: '0 2 * * 1'
  
  # Manual workflow dispatch for testing and debugging purposes
  workflow_dispatch:
    description: 'Manual workflow trigger for testing and debugging purposes'

# Concurrency control to prevent multiple CI runs for same branch and optimize resource usage
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Workflow permissions for GitHub Actions integration
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

# Environment variables for CI execution
env:
  CI: true
  NODE_ENV: test

# Job definitions implementing comprehensive CI pipeline
jobs:
  # Code Quality and Linting Job
  lint:
    name: Code Quality and Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      # Checkout repository source code for linting analysis
      - name: Checkout Repository
        uses: actions/checkout@v4 # actions/checkout v4
        with:
          fetch-depth: 0
      
      # Setup Node.js v22 LTS for stable linting environment
      - name: Setup Node.js LTS
        uses: actions/setup-node@v4 # actions/setup-node v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      # Install project dependencies for linting tools
      - name: Install Dependencies
        run: cd src/backend && npm ci
      
      # Execute comprehensive code linting with educational rules
      - name: Run ESLint
        run: cd src/backend && npm run lint:check
      
      # Generate detailed lint report for educational feedback
      - name: Generate Lint Report
        run: cd src/backend && npx eslint . --format json --output-file lint-results.json
        continue-on-error: true
      
      # Upload lint results for detailed analysis
      - name: Upload Lint Results
        uses: actions/upload-artifact@v4 # actions/upload-artifact v4
        if: always()
        with:
          name: lint-results
          path: src/backend/lint-results.json
          retention-days: 30

  # Testing and Coverage Job with Node.js Version Matrix
  test:
    name: Testing and Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: ['18', '20', '22', '24']
        include:
          # Minimum supported Node.js version testing
          - node-version: '18'
            description: 'Minimum supported Node.js version testing'
          # Maintenance LTS version testing
          - node-version: '20'
            description: 'Maintenance LTS version testing'
          # Active LTS version testing (recommended for production)
          - node-version: '22'
            description: 'Active LTS version testing (recommended)'
          # Current version testing (latest features)
          - node-version: '24'
            description: 'Current version testing (latest features)'
      # Allow all version tests to complete for comprehensive compatibility analysis
      fail-fast: false
    
    steps:
      # Checkout source code for testing
      - name: Checkout Repository
        uses: actions/checkout@v4 # actions/checkout v4
      
      # Setup Node.js version for compatibility testing
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4 # actions/setup-node v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      # Cache node_modules for improved CI performance
      - name: Cache Dependencies
        uses: actions/cache@v4 # actions/cache v4
        with:
          path: src/backend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('src/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
      
      # Install exact dependencies from package-lock.json
      - name: Install Dependencies
        run: cd src/backend && npm ci
      
      # Validate application configuration and health
      - name: Validate Application Health
        run: cd src/backend && npm run health
      
      # Execute unit tests for individual component validation
      - name: Run Unit Tests
        run: cd src/backend && npm run test:unit
      
      # Execute integration tests for system validation
      - name: Run Integration Tests
        run: cd src/backend && npm run test:integration
      
      # Generate comprehensive test coverage analysis
      - name: Generate Coverage Report
        run: cd src/backend && npm run test:coverage
      
      # Upload coverage report for LTS version analysis
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3 # codecov/codecov-action v3
        if: matrix.node-version == '22'
        with:
          file: src/backend/coverage/lcov.info
          flags: unittests
          name: node-${{ matrix.node-version }}-coverage
          fail_ci_if_error: true
      
      # Upload coverage artifacts for educational analysis
      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4 # actions/upload-artifact v4
        if: always()
        with:
          name: coverage-node-${{ matrix.node-version }}
          path: src/backend/coverage/
          retention-days: 30

  # Security and Dependency Analysis Job
  security:
    name: Security and Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      # Checkout source code for security analysis
      - name: Checkout Repository
        uses: actions/checkout@v4 # actions/checkout v4
      
      # Setup Node.js LTS for security scanning
      - name: Setup Node.js LTS
        uses: actions/setup-node@v4 # actions/setup-node v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      # Install dependencies for security analysis
      - name: Install Dependencies
        run: cd src/backend && npm ci
      
      # Check for known security vulnerabilities in dependencies
      - name: Run npm audit
        run: cd src/backend && npm audit --audit-level moderate
      
      # Identify outdated dependencies for maintenance guidance
      - name: Check for Outdated Dependencies
        run: cd src/backend && npm outdated
        continue-on-error: true
      
      # Validate package-lock.json consistency
      - name: Validate Package Lock
        run: cd src/backend && npm ci --dry-run

  # Build and Application Verification Job
  build_verification:
    name: Build and Application Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint, test]
    
    steps:
      # Checkout source code for build verification
      - name: Checkout Repository
        uses: actions/checkout@v4 # actions/checkout v4
      
      # Setup Node.js LTS for build verification
      - name: Setup Node.js LTS
        uses: actions/setup-node@v4 # actions/setup-node v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'src/backend/package-lock.json'
      
      # Install dependencies for application verification
      - name: Install Dependencies
        run: cd src/backend && npm ci
      
      # Test application startup and basic functionality
      - name: Verify Application Startup
        run: cd src/backend && timeout 30s npm start || exit 0
      
      # Validate HTTP server functionality and endpoint availability
      - name: Test HTTP Endpoint
        run: cd src/backend && npm run health
      
      # Generate comprehensive application verification report
      - name: Generate Application Report
        run: |
          cd src/backend
          echo "# Application Verification Report" > verification-report.md
          echo "- Node.js Version: $(node --version)" >> verification-report.md
          echo "- NPM Version: $(npm --version)" >> verification-report.md
          echo "- Application Status: Running" >> verification-report.md
          echo "- Endpoint Test: Passed" >> verification-report.md
          echo "- Build Timestamp: $(date -u)" >> verification-report.md
          echo "- Git Commit: ${{ github.sha }}" >> verification-report.md
      
      # Upload verification report for educational analysis
      - name: Upload Verification Report
        uses: actions/upload-artifact@v4 # actions/upload-artifact v4
        with:
          name: verification-report
          path: src/backend/verification-report.md
          retention-days: 30